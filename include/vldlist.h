/*
 * $Id: vldlist.h,v 2.14.4.1 1995/10/17 20:42:19 cway Stab $
 *
 * General purpose doubly linked list interface.
 *
 * Copyright (c) 1991 by Viewlogic Systems, Inc.
 */


#ifndef vlDLIST_H
#define vlDLIST_H

#ifndef vlLIB_H
#include "vllib.h"
#endif

typedef struct wl2 *vlDlistID;
typedef struct wl2cell *vlDlistCellID;

typedef int (*vlDlistFuncPtrT) vlARG2(vlPointerT, vlPointerT);

/*\Docpage vlDlistLoopT -- Enum type used for stopping or continuing loops
 *
 * DESCRIPTION
 *      This exists solely for compatibility with previous versions
 *      of the library -- the real typedef is `vlLoopT'.
 */
#define vlDlistLoopT vlLoopT
#define vlDlistSTOP vlLoopSTOP
#define vlDlistCONTINUE vlLoopCONTINUE

/*\Docpage vlDlistLoopProcT -- obsolete action procedure pointer typedef
 * 
 * DESCRIPTION
 *      Typedef for pointer to function returning vlLoopT.
 *      Its parameters are not prototyped.
 * 
 *      This exists solely for compatibility with previous versions
 *      of the library -- the real typedef is `vlLoopProcT'.
 */
#define vlDlistLoopProcT vlLoopProcT

/*\Header vlDlistFOR_EACH -- Iterator for vlDlist lists

DESCRIPTION
     Iterate through each element in a vldlist list, calling a body
     of code with an iteration variable, "var", defined to that element
     of the list.

WARNING
     This version will not work correctly if any other vlDlist calls
     are made to the list being iterated, as it uses a state variable
     inside the vlDlist object.

SEE ALSO
     vlDlistFOR_EACH_SAFE
*/
#define vlDlistFOR_EACH(type, var, list, code) {                        \
    type var;                                                           \
    for (var = (type) vlDlistHead (list); var != (type) NULL;           \
         var = (type) vlDlistNxtElement (list))                         \
    {code;}                                                             \
} /* vlDlistFOR_EACH */


/*\Header vlDlistFOR_EACH_SAFE -- Iterator for vlDlist lists

DESCRIPTION
     Iterate through each element in a vldlist list, calling a body
     of code with an iteration variable, "var", defined to that element
     of the list.

NOTE
     This version will work correctly if with most other vlDlist calls
     made to the list being iterated, as it restores its state after the
     code body is executed.

SEE ALSO
     vlDlistFOR_EACH
*/
#define vlDlistFOR_EACH_SAFE(type, var, list, code) {                   \
    type var;                                                           \
    for (var = (type) vlDlistHead (list); var != (type) NULL;           \
         var = (type) vlDlistNxtElement (list))                         \
    {                                                                   \
         vlDlistCellID vlCONCAT_TOKEN (vlDlistCell,var) =               \
             vlDlistCurCell (list);                                     \
         {code;}                                                        \
         vlDlistSetCurrent (list, vlCONCAT_TOKEN (vlDlistCell,var));    \
    }                                                                   \
} /* vlDlistFOR_EACH_SAFE */


/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.
 *
 *   Created: Fri Mar  4 10:56:50 1994
 */

extern vlDlistID vlDlistCreate vlARGS(( void ));
extern void vlDlistAddHead vlARGS(( vlDlistID l, vlPointerT e ));
extern void vlDlistAddTail vlARGS(( vlDlistID l, vlPointerT e ));
extern vlPointerT vlDlistRemHead vlARGS(( vlDlistID l ));
extern vlPointerT vlDlistRemTail vlARGS(( vlDlistID l ));
extern vlPointerT vlDlistHead vlARGS(( vlDlistID l ));
extern vlPointerT vlDlistTail vlARGS(( vlDlistID l ));
extern vlBoolT vlDlistEmpty vlARGS(( vlDlistID l ));
extern int vlDlistSize vlARGS(( vlDlistID l ));
extern vlBoolT vlDlistSearchFor vlARGS(( vlDlistID l, vlPointerT e ));
extern vlBoolT vlDlistSearchForKey vlARGS(( vlDlistID l, vlPointerT e,
                                            vlBoolProcT equaltest ));
extern vlBoolT vlDlistDelElement vlARGS(( vlDlistID l, vlPointerT e ));
extern vlPointerT vlDlistCurElement vlARGS(( vlDlistID l ));
extern vlDlistCellID vlDlistCurCell vlARGS(( vlDlistID l ));
extern void vlDlistSetCurrent vlARGS(( vlDlistID l, vlDlistCellID c ));
extern void vlDlistMoveCurToHead vlARGS(( vlDlistID l ));
extern vlPointerT vlDlistNxtElement vlARGS(( vlDlistID l ));
extern vlPointerT vlDlistPreElement vlARGS(( vlDlistID l ));
extern vlDlistCellID vlDlistNxtCell vlARGS(( vlDlistID l ));
extern vlDlistCellID vlDlistPreCell vlARGS(( vlDlistID l ));
extern vlBoolT vlDlistCurFirst vlARGS(( vlDlistID l ));
extern vlBoolT vlDlistCurLast vlARGS(( vlDlistID l ));
extern void vlDlistDelCurrent vlARGS(( vlDlistID l ));
extern void vlDlistInsBefore vlARGS(( vlDlistID l, vlPointerT e ));
extern void vlDlistInsAfter vlARGS(( vlDlistID l, vlPointerT e ));
extern vlLoopT vlDlistLoop vlARGS(( vlDlistID l, vlLoopProcT proc,
                                    vlPointerT arg ));
extern vlLoopT vlDlistReverseLoop vlARGS(( vlDlistID l, vlLoopProcT proc,
                                           vlPointerT arg ));
extern vlLoopT vlDlistLoop2 vlARGS(( vlDlistID l, vlLoopProcT proc,
                                     vlPointerT arg1, vlPointerT arg2 ));
extern vlLoopT vlDlistLoop3 vlARGS(( vlDlistID l, vlLoopProcT proc,
                                     vlPointerT arg1, vlPointerT arg2,
                                     vlPointerT arg3 ));
extern void vlDlistMovhh vlARGS(( vlDlistID from_list, vlDlistID to_list ));
extern void vlDlistMovht vlARGS(( vlDlistID from_list, vlDlistID to_list ));
extern void vlDlistMovth vlARGS(( vlDlistID from_list, vlDlistID to_list ));
extern void vlDlistMovtt vlARGS(( vlDlistID from_list, vlDlistID to_list ));
extern void vlDlistClearList vlARGS(( vlDlistID l ));
extern void vlDlistFreeList vlARGS(( vlDlistID l ));
extern void vlDlistDestroyList vlARGS(( vlDlistID l, vlVoidProcT
                                        destroy_element, vlPointerT arg ));
extern void vlDlistPurge vlARGS(( void ));
extern void vlDlistMoveAll vlARGS(( vlDlistID destination, vlDlistID source ));
extern void vlDlistSort vlARGS(( vlDlistID list, vlDlistFuncPtrT compare ));
extern vlDlistID vlDlistCopy vlARGS(( vlDlistID l, vlPointerProcT proc ));
extern vlPointerT *vlDlistListToArray vlARGS(( vlDlistID list, vlPointerT
                                               *buffer ));
extern vlDlistID vlDlistArrayToList vlARGS(( vlPointerT *array, vlDlistID
                                             list ));



#endif /* vlDLIST_H */
