/*
 * $Id: vlsymtab.h,v 2.19.4.1 1995/10/17 20:43:08 cway Stab $
 *
 * Symbol table interface header.
 *
 * Copyright (c) 1991,1994 by Viewlogic Systems, Inc.
 */

#ifndef vlSymTAB_H
#define vlSymTAB_H

#ifndef vlLIB_H
#include "vllib.h"
#endif

typedef unsigned int (*vlSymHashProcT) vlARGS((vlPointerT));
/* for compatibility */
typedef unsigned int (*vlSymHashFunctionT) vlARGS((vlPointerT));
typedef vlBoolT (*vlSymCompareProcT) vlARGS((vlPointerT, vlPointerT));
typedef struct symtable *vlSymTableID;

/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.
 *
 *   Created: Thu Apr  7 11:30:11 1994
 */

extern vlSymTableID vlSymCreate vlARGS(( unsigned int size, vlSymHashProcT
                                         hash_function, vlBoolProcT
                                         compare, vlPointerProcT copy,
                                         vlVoidProcT free ));
extern void vlSymResize vlARGS(( vlSymTableID table, unsigned int new_size ));
extern void vlSymDynamic vlARGS(( vlSymTableID table, double
                                  entries_per_bucket, double
                                  new_size_factor ));
extern void vlSymNotFoundValue vlARGS(( vlSymTableID table, vlPointerT val ));
extern void vlSymDestroy vlARGS(( vlSymTableID t, vlVoidProcT
                                  destroy_value_proc ));
extern void vlSymClear vlARGS(( vlSymTableID t, vlVoidProcT
                                destroy_value_proc ));
extern void vlSymClearAddr vlARGS((vlSymTableID t, vlVoidProcT
                                   destroy_value_proc ));
extern vlPointerT vlSymStore vlARGS(( vlSymTableID t, vlPointerT sym,
                                      vlPointerT val ));
extern vlPointerT vlSymFetch vlARGS(( vlSymTableID t, vlPointerT sym ));
extern vlPointerT *vlSymFetchAddr vlARGS(( vlSymTableID t, vlPointerT sym ));
extern vlPointerT vlSymRemove vlARGS(( vlSymTableID t, vlPointerT sym ));
extern void vlSymMoveAll vlARGS(( vlSymTableID destination, vlSymTableID
                                  source, vlVoidProcT destroy_value_proc ));
extern void vlSymCopyAll vlARGS(( vlSymTableID , vlSymTableID,
                                  vlPointerProcT, vlVoidProcT ));
extern vlLoopT vlSymLoop vlARGS(( vlSymTableID t, vlLoopProcT proc,
                                  vlPointerT arg1, vlPointerT arg2 ));
extern vlLoopT vlSymLoopResume vlARGS(( vlSymTableID t, vlLoopProcT proc,
                                        vlPointerT symbol, vlPointerT arg1,
                                        vlPointerT arg2 ));
extern vlLoopT vlSymLoopAddr vlARGS(( vlSymTableID t, vlLoopProcT proc,
                                      vlPointerT arg1, vlPointerT arg2 ));
extern vlLoopT vlSymLoopAddr2 vlARGS(( vlSymTableID t, vlLoopProcT proc,
                                       vlPointerT arg1, vlPointerT arg2 ));
extern int vlSymSize vlARGS(( vlSymTableID t ));
extern unsigned int vlSymStHash vlARGS(( vlPointerT sptr ));
extern unsigned int vlSymStIhash vlARGS(( vlPointerT sptr ));
extern vlPointerT vlSymStCpy vlARGS(( vlPointerT str ));
extern void vlSymStFree vlARGS(( vlPointerT str ));
extern unsigned int vlSymPtrHash vlARGS(( vlPointerT ptr ));
extern vlBoolT vlSymPtrCmp vlARGS(( vlPointerT ptr1, vlPointerT ptr2 ));
extern vlPointerT vlSymReturn vlARGS(( vlPointerT ptr ));
extern void vlSymDummy vlARGS(( vlPointerT ptr ));
extern void vlSymDump vlARGS(( vlSymTableID t ));
extern vlPointerT *vlSymTableToArray vlARGS(( vlSymTableID t, vlPointerT
                                              *buffer, vlQsortProcT
                                              sort_proc ));
extern void vlSymStrDump vlARGS(( vlSymTableID table ));
extern void vlSymAnalyze vlARGS(( vlSymTableID table, int max_freq ));



#define vlSymST_CREATE(size) \
 vlSymCreate (size, vlSymStHash,(vlBoolProcT)vlStrEqu, vlSymReturn, vlSymDummy)

#define vlSymPTR_CREATE(sz) \
 vlSymCreate (sz, vlSymPtrHash, vlSymPtrCmp, vlSymReturn, vlSymDummy)

#define vlSymNO_SORT ((vlQsortProcT) vlDummyProc)

#endif /* vlSymTAB_H */
